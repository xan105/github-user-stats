function c(t,o="en"){let i=new Intl.RelativeTimeFormat(o,{numeric:"auto"}),e=t-Math.floor(Date.now()/1e3);return i.format(Math.round(e/60),"minute")}async function l(t,o=!0){let e=await fetch("https://api.github.com"+t,{headers:{"X-GitHub-Api-Version":"2022-11-28"},priority:"low"});if(e.status>=400){let{message:n}=await e.json(),s=new Error(n);throw s.code=e.status,s.info={limit:+e.headers.get("x-ratelimit-limit"),used:+e.headers.get("x-ratelimit-used"),remaining:+e.headers.get("x-ratelimit-remaining"),reset:c(+e.headers.get("x-ratelimit-reset"))},s}return o?await e.json():e}async function f(t){if(!(typeof t=="string"&&t.length>0))throw new Error("Expected non-empty string !");let o=await l("/users/"+t,!1),i=+o.headers.get("x-ratelimit-remaining"),e=await o.json(),n=100,s=Math.ceil(e.public_repos/n);if(s>i){let r=new Error(`"${t}" has too many repos! You will exceed the maximum number of requests you are permitted to make per hour`);throw r.code="ERR_RATELIMIT_SAFEGUARD",r.info={repos:e.public_repos,needed:s,remaining:i},r}let p=[...Array(s).keys()].map(r=>l(`/users/${t}/repos?per_page=${n}&page=${r}`)),u=(await Promise.all(p)).flat().reduce((r,a)=>(r.stars+=a.stargazers_count,r.forks+=a.forks,r),{stars:0,forks:0});return{repos:e.public_repos,gists:e.public_gists,followers:e.followers,following:e.following,...u}}export{f as getUserStats};
